/*
Copyright 2021 The KubeLB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8c.io/kubelb/pkg/api/kubelb.k8c.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPLoadBalancerLister helps list HTTPLoadBalancers.
// All objects returned here must be treated as read-only.
type HTTPLoadBalancerLister interface {
	// List lists all HTTPLoadBalancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPLoadBalancer, err error)
	// HTTPLoadBalancers returns an object that can list and get HTTPLoadBalancers.
	HTTPLoadBalancers(namespace string) HTTPLoadBalancerNamespaceLister
	HTTPLoadBalancerListerExpansion
}

// hTTPLoadBalancerLister implements the HTTPLoadBalancerLister interface.
type hTTPLoadBalancerLister struct {
	indexer cache.Indexer
}

// NewHTTPLoadBalancerLister returns a new HTTPLoadBalancerLister.
func NewHTTPLoadBalancerLister(indexer cache.Indexer) HTTPLoadBalancerLister {
	return &hTTPLoadBalancerLister{indexer: indexer}
}

// List lists all HTTPLoadBalancers in the indexer.
func (s *hTTPLoadBalancerLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPLoadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPLoadBalancer))
	})
	return ret, err
}

// HTTPLoadBalancers returns an object that can list and get HTTPLoadBalancers.
func (s *hTTPLoadBalancerLister) HTTPLoadBalancers(namespace string) HTTPLoadBalancerNamespaceLister {
	return hTTPLoadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPLoadBalancerNamespaceLister helps list and get HTTPLoadBalancers.
// All objects returned here must be treated as read-only.
type HTTPLoadBalancerNamespaceLister interface {
	// List lists all HTTPLoadBalancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HTTPLoadBalancer, err error)
	// Get retrieves the HTTPLoadBalancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HTTPLoadBalancer, error)
	HTTPLoadBalancerNamespaceListerExpansion
}

// hTTPLoadBalancerNamespaceLister implements the HTTPLoadBalancerNamespaceLister
// interface.
type hTTPLoadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPLoadBalancers in the indexer for a given namespace.
func (s hTTPLoadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HTTPLoadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HTTPLoadBalancer))
	})
	return ret, err
}

// Get retrieves the HTTPLoadBalancer from the indexer for a given namespace and name.
func (s hTTPLoadBalancerNamespaceLister) Get(name string) (*v1alpha1.HTTPLoadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httploadbalancer"), name)
	}
	return obj.(*v1alpha1.HTTPLoadBalancer), nil
}
