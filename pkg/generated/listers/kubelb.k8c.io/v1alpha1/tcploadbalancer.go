/*
Copyright 2020 The KubeLB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8c.io/kubelb/pkg/api/kubelb.k8c.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TCPLoadBalancerLister helps list TCPLoadBalancers.
type TCPLoadBalancerLister interface {
	// List lists all TCPLoadBalancers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TCPLoadBalancer, err error)
	// TCPLoadBalancers returns an object that can list and get TCPLoadBalancers.
	TCPLoadBalancers(namespace string) TCPLoadBalancerNamespaceLister
	TCPLoadBalancerListerExpansion
}

// tCPLoadBalancerLister implements the TCPLoadBalancerLister interface.
type tCPLoadBalancerLister struct {
	indexer cache.Indexer
}

// NewTCPLoadBalancerLister returns a new TCPLoadBalancerLister.
func NewTCPLoadBalancerLister(indexer cache.Indexer) TCPLoadBalancerLister {
	return &tCPLoadBalancerLister{indexer: indexer}
}

// List lists all TCPLoadBalancers in the indexer.
func (s *tCPLoadBalancerLister) List(selector labels.Selector) (ret []*v1alpha1.TCPLoadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TCPLoadBalancer))
	})
	return ret, err
}

// TCPLoadBalancers returns an object that can list and get TCPLoadBalancers.
func (s *tCPLoadBalancerLister) TCPLoadBalancers(namespace string) TCPLoadBalancerNamespaceLister {
	return tCPLoadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TCPLoadBalancerNamespaceLister helps list and get TCPLoadBalancers.
type TCPLoadBalancerNamespaceLister interface {
	// List lists all TCPLoadBalancers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TCPLoadBalancer, err error)
	// Get retrieves the TCPLoadBalancer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TCPLoadBalancer, error)
	TCPLoadBalancerNamespaceListerExpansion
}

// tCPLoadBalancerNamespaceLister implements the TCPLoadBalancerNamespaceLister
// interface.
type tCPLoadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TCPLoadBalancers in the indexer for a given namespace.
func (s tCPLoadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TCPLoadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TCPLoadBalancer))
	})
	return ret, err
}

// Get retrieves the TCPLoadBalancer from the indexer for a given namespace and name.
func (s tCPLoadBalancerNamespaceLister) Get(name string) (*v1alpha1.TCPLoadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tcploadbalancer"), name)
	}
	return obj.(*v1alpha1.TCPLoadBalancer), nil
}
