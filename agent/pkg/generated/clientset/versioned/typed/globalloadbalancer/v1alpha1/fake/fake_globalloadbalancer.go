/*
Copyright 2020 Kubermatic GmbH.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "k8c.io/kubelb/manager/pkg/api/globalloadbalancer/v1alpha1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGlobalLoadBalancers implements GlobalLoadBalancerInterface
type FakeGlobalLoadBalancers struct {
	Fake *FakeKubelbV1alpha1
	ns   string
}

var globalloadbalancersResource = schema.GroupVersionResource{Group: "kubelb.k8c.io", Version: "v1alpha1", Resource: "globalloadbalancers"}

var globalloadbalancersKind = schema.GroupVersionKind{Group: "kubelb.k8c.io", Version: "v1alpha1", Kind: "GlobalLoadBalancer"}

// Get takes name of the globalLoadBalancer, and returns the corresponding globalLoadBalancer object, and an error if there is any.
func (c *FakeGlobalLoadBalancers) Get(name string, options v1.GetOptions) (result *v1alpha1.GlobalLoadBalancer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(globalloadbalancersResource, c.ns, name), &v1alpha1.GlobalLoadBalancer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), err
}

// List takes label and field selectors, and returns the list of GlobalLoadBalancers that match those selectors.
func (c *FakeGlobalLoadBalancers) List(opts v1.ListOptions) (result *v1alpha1.GlobalLoadBalancerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(globalloadbalancersResource, globalloadbalancersKind, c.ns, opts), &v1alpha1.GlobalLoadBalancerList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.GlobalLoadBalancerList{ListMeta: obj.(*v1alpha1.GlobalLoadBalancerList).ListMeta}
	for _, item := range obj.(*v1alpha1.GlobalLoadBalancerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested globalLoadBalancers.
func (c *FakeGlobalLoadBalancers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(globalloadbalancersResource, c.ns, opts))

}

// Create takes the representation of a globalLoadBalancer and creates it.  Returns the server's representation of the globalLoadBalancer, and an error, if there is any.
func (c *FakeGlobalLoadBalancers) Create(globalLoadBalancer *v1alpha1.GlobalLoadBalancer) (result *v1alpha1.GlobalLoadBalancer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(globalloadbalancersResource, c.ns, globalLoadBalancer), &v1alpha1.GlobalLoadBalancer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), err
}

// Update takes the representation of a globalLoadBalancer and updates it. Returns the server's representation of the globalLoadBalancer, and an error, if there is any.
func (c *FakeGlobalLoadBalancers) Update(globalLoadBalancer *v1alpha1.GlobalLoadBalancer) (result *v1alpha1.GlobalLoadBalancer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(globalloadbalancersResource, c.ns, globalLoadBalancer), &v1alpha1.GlobalLoadBalancer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeGlobalLoadBalancers) UpdateStatus(globalLoadBalancer *v1alpha1.GlobalLoadBalancer) (*v1alpha1.GlobalLoadBalancer, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(globalloadbalancersResource, "status", c.ns, globalLoadBalancer), &v1alpha1.GlobalLoadBalancer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), err
}

// Delete takes name of the globalLoadBalancer and deletes it. Returns an error if one occurs.
func (c *FakeGlobalLoadBalancers) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(globalloadbalancersResource, c.ns, name), &v1alpha1.GlobalLoadBalancer{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGlobalLoadBalancers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(globalloadbalancersResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.GlobalLoadBalancerList{})
	return err
}

// Patch applies the patch and returns the patched globalLoadBalancer.
func (c *FakeGlobalLoadBalancers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.GlobalLoadBalancer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(globalloadbalancersResource, c.ns, name, pt, data, subresources...), &v1alpha1.GlobalLoadBalancer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), err
}
