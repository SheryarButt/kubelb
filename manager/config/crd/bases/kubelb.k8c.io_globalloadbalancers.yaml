
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: globalloadbalancers.kubelb.k8c.io
spec:
  group: kubelb.k8c.io
  names:
    kind: GlobalLoadBalancer
    listKind: GlobalLoadBalancerList
    plural: globalloadbalancers
    shortNames:
    - glb
    singular: globalloadbalancer
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GlobalLoadBalancer is the Schema for the globalloadbalancers
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'NOTE: json tags are required.  Any new fields you add must
              have json tags for the fields to be serialized. GlobalLoadBalancerSpec
              defines the desired state of GlobalLoadBalancer'
            properties:
              endpoints:
                description: Sets of addresses and ports that comprise an exposed
                  user service on a cluster.
                items:
                  description: 'LoadBalancerEndpoints is a group of addresses with
                    a common set of ports. The expanded set of endpoints is the Cartesian
                    product of Addresses x Ports. For example, given:   {     Addresses:
                    [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],     Ports:     [{"name":
                    "a", "port": 8675}, {"name": "b", "port": 309}]   } The resulting
                    set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675
                    ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]'
                  properties:
                    addresses:
                      description: IP addresses which offer the related ports that
                        are marked as ready. These endpoints should be considered
                        safe for load balancers and clients to utilize.
                      items:
                        description: EndpointAddress is a tuple that describes single
                          IP address.
                        properties:
                          hostname:
                            description: The Hostname of this endpoint
                            type: string
                          ip:
                            description: 'The IP of this endpoint. May not be loopback
                              (127.0.0.0/8), link-local (169.254.0.0/16), or link-local
                              multicast ((224.0.0.0/24). TODO: This should allow hostname
                              or IP, See #4447.'
                            type: string
                        required:
                        - ip
                        type: object
                      minItems: 1
                      type: array
                    ports:
                      description: Port numbers available on the related IP addresses.
                      items:
                        description: EndpointPort is a tuple that describes a single
                          port.
                        properties:
                          name:
                            description: The name of this port.  This must match the
                              'name' field in the corresponding ServicePort. Must
                              be a DNS_LABEL. Optional only if one port is defined.
                            type: string
                          port:
                            description: The port number of the endpoint.
                            format: int32
                            type: integer
                          protocol:
                            default: TCP
                            description: The IP protocol for this port. Must be UDP,
                              TCP, or SCTP. Default is TCP.
                            enum:
                            - TCP
                            - UDP
                            - SCTP
                            type: string
                        required:
                        - port
                        type: object
                      minItems: 1
                      type: array
                  type: object
                minItems: 1
                type: array
              ports:
                description: The list of ports that are exposed by the load balancer
                  service. only needed for layer 4
                items:
                  description: LoadBalancerPort contains information on service's
                    port.
                  properties:
                    name:
                      description: The name of this port within the service. This
                        must be a DNS_LABEL. All ports within a Spec must have unique
                        names. When considering the endpoints for a Service, this
                        must match the 'name' field in the EndpointPort. Optional
                        if only one ServicePort is defined on this service.
                      type: string
                    port:
                      description: The port that will be exposed by the LoadBalancer.
                      format: int32
                      type: integer
                    protocol:
                      default: TCP
                      description: The IP protocol for this port. Supports "TCP",
                        "UDP", and "SCTP". Default is TCP.
                      enum:
                      - TCP
                      - UDP
                      - SCTP
                      type: string
                  required:
                  - port
                  type: object
                type: array
              type:
                description: Type of the load balancer This deciedes which kind of
                  load balancing will be used and which features are enabled
                type: string
            type: object
          status:
            description: GlobalLoadBalancerStatus defines the observed state of GlobalLoadBalancer
            properties:
              loadBalancer:
                description: LoadBalancer contains the current status of the load-balancer,
                  if one is present.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngress represents the status of a
                        load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        hostname:
                          description: Hostname is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points
                            that are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
